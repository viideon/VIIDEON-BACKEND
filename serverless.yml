service: viideon-backend
frameworkVersion: '3'

custom:
  campaignTemplateTableName: '${self:service}-${sls:stage}-campaign-template'
  choicesTableName: '${self:service}-${sls:stage}-choices'
  contactTableName: '${self:service}-${sls:stage}-contact'
  emailConfigTableName: '${self:service}-${sls:stage}-email-config'
  industriesTableName: '${self:service}-${sls:stage}-industries'
  interactiveTableName: '${self:service}-${sls:stage}-interactive'
  metricsTableName: '${self:service}-${sls:stage}-metrics'
  peopleTableName: '${self:service}-${sls:stage}-people'
  publicMusicAssetsTableName: '${self:service}-${sls:stage}-public-music-assets'
  replyTableName: '${self:service}-${sls:stage}-reply'
  settingTableName: '${self:service}-${sls:stage}-setting'
  stepTableName: '${self:service}-${sls:stage}-step'
  tokenTableName: '${self:service}-${sls:stage}-token'
  userTableName: '${self:service}-${sls:stage}-user'
  userAssetsTableName: '${self:service}-${sls:stage}-user-assets'
  videosTableName: '${self:service}-${sls:stage}-videos'
  clientBucketName: ${self:service}-${sls:stage}-${aws:accountId}-viideon
  recovery:
    prod: True
    dev: False
  additionalStacks:
    tables:
      Outputs:
        CampaignTemplateStreamArn:
          Value:
            Fn::GetAtt:
              - CampaignTemplateTable
              - StreamArn
          Export:
            Name: ${self:custom.campaignTemplateTableName}-streamarn
        ChoicesStreamArn:
          Value:
            Fn::GetAtt:
              - ChoicesTable
              - StreamArn
          Export:
            Name: ${self:custom.choicesTableName}-streamarn
        ContactStreamArn:
          Value:
            Fn::GetAtt:
              - ContactTable
              - StreamArn
          Export:
            Name: ${self:custom.contactTableName}-streamarn
        EmailConfigStreamArn:
          Value:
            Fn::GetAtt:
              - EmailConfigTable
              - StreamArn
          Export:
            Name: ${self:custom.emailConfigTableName}-streamarn
        IndustriesStreamArn:
          Value:
            Fn::GetAtt:
              - IndustriesTable
              - StreamArn
          Export:
            Name: ${self:custom.industriesTableName}-streamarn
        InteractiveStreamArn:
          Value:
            Fn::GetAtt:
              - InteractiveTable
              - StreamArn
          Export:
            Name: ${self:custom.interactiveTableName}-streamarn
        MetricsStreamArn:
          Value:
            Fn::GetAtt:
              - MetricsTable
              - StreamArn
          Export:
            Name: ${self:custom.metricsTableName}-streamarn
        PeopleStreamArn:
          Value:
            Fn::GetAtt:
              - PeopleTable
              - StreamArn
          Export:
            Name: ${self:custom.peopleTableName}-streamarn
        PublicMusicAssetsStreamArn:
          Value:
            Fn::GetAtt:
              - PublicMusicAssetsTable
              - StreamArn
          Export:
            Name: ${self:custom.publicMusicAssetsTableName}-streamarn
        ReplyStreamArn:
          Value:
            Fn::GetAtt:
              - ReplyTable
              - StreamArn
          Export:
            Name: ${self:custom.replyTableName}-streamarn
        SettingStreamArn:
          Value:
            Fn::GetAtt:
              - SettingTable
              - StreamArn
          Export:
            Name: ${self:custom.settingTableName}-streamarn
        StepStreamArn:
          Value:
            Fn::GetAtt:
              - StepTable
              - StreamArn
          Export:
            Name: ${self:custom.stepTableName}-streamarn
        TokenStreamArn:
          Value:
            Fn::GetAtt:
              - TokenTable
              - StreamArn
          Export:
            Name: ${self:custom.tokenTableName}-streamarn
        UserStreamArn:
          Value:
            Fn::GetAtt:
              - UserTable
              - StreamArn
          Export:
            Name: ${self:custom.userTableName}-streamarn
        UserAssetsStreamArn:
          Value:
            Fn::GetAtt:
              - UserAssetsTable
              - StreamArn
          Export:
            Name: ${self:custom.userAssetsTableName}-streamarn
        VideosStreamArn:
          Value:
            Fn::GetAtt:
              - VideosTable
              - StreamArn
          Export:
            Name: ${self:custom.videosTableName}-streamarn
      Resources:
        CampaignTemplateTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: industryId
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.campaignTemplateTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-industryId
                KeySchema:
                  - AttributeName: industryId
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        ChoicesTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.choicesTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        ContactTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.contactTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        EmailConfigTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: userId
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.emailConfigTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-userId
                KeySchema:
                  - AttributeName: userId
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        IndustriesTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.industriesTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        InteractiveTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: userId
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.interactiveTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
            GlobalSecondaryIndexes:
              - IndexName: gidx-userId
                KeySchema:
                  - AttributeName: userId
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
        MetricsTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.metricsTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        PeopleTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.peopleTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        PublicMusicAssetsTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.publicMusicAssetsTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        ReplyTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.replyTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        SettingTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: userId
                AttributeType: S
              - AttributeName: name
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            GlobalSecondaryIndexes:
              - IndexName: gidx-userIdName
                KeySchema:
                  - AttributeName: userId
                    KeyType: HASH
                  - AttributeName: name
                    KeyType: RANGE
                Projection:
                  ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.settingTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        StepTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.stepTableName}
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        TokenTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: token
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.tokenTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-token
                KeySchema:
                  - AttributeName: token
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        UserTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: email
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.userTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-email
                KeySchema:
                  - AttributeName: email
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        UserAssetsTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: userId
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.userAssetsTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-userId
                KeySchema:
                  - AttributeName: userId
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
        VideosTable:
          Type: AWS::DynamoDB::Table
          DeletionPolicy: Retain
          Properties:
            PointInTimeRecoverySpecification:
              PointInTimeRecoveryEnabled: ${self:custom.recovery.${sls:stage, 'dev'}}
            AttributeDefinitions:
              - AttributeName: _id
                AttributeType: S
              - AttributeName: url
                AttributeType: S
              - AttributeName: thumbnail
                AttributeType: S
              - AttributeName: title
                AttributeType: S
              - AttributeName: userId
                AttributeType: S
            KeySchema:
              - AttributeName: _id
                KeyType: HASH
            BillingMode: PAY_PER_REQUEST
            TableName: ${self:custom.videosTableName}
            GlobalSecondaryIndexes:
              - IndexName: gidx-url
                KeySchema:
                  - AttributeName: url
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
              - IndexName: gidx-thumbnail
                KeySchema:
                  - AttributeName: thumbnail
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
              - IndexName: gidx-title
                KeySchema:
                  - AttributeName: title
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
              - IndexName: gidx-userId
                KeySchema:
                  - AttributeName: userId
                    KeyType: HASH
                Projection:
                  ProjectionType: ALL
            StreamSpecification:
              StreamViewType: NEW_AND_OLD_IMAGES
    s3:
      Outputs:
        ClientBucketName:
          Value: !Ref ClientBucket
          Export:
            Name: ${self:custom.clientBucketName}-name
        ClientBucketArn:
          Value:
            Fn::GetAtt:
              - ClientBucket
              - Arn
          Export:
            Name: ${self:custom.clientBucketName}-arn
      Resources:
        ClientBucket:
          Type: AWS::S3::Bucket
          Properties:
            BucketName: ${self:custom.clientBucketName}
            BucketEncryption:
              ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
            PublicAccessBlockConfiguration:
              BlockPublicAcls: True
              BlockPublicPolicy: True
              IgnorePublicAcls: True
              RestrictPublicBuckets: True
            VersioningConfiguration:
              Status: Enabled
            CorsConfiguration:
              CorsRules:
                - AllowedHeaders:
                    - '*'
                  AllowedMethods:
                    - GET
                    - HEAD
                    - PUT
                    - POST
                    - DELETE
                  AllowedOrigins:
                    - '*'
                  ExposedHeaders:
                    - x-amz-server-side-encryption
                    - x-amz-request-id
                    - x-amz-id-2
                    - ETag
                  MaxAge: 3000

provider:
  name: aws
  runtime: nodejs16.x
  architecture: arm64
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - lambda:InvokeFunction
          Resource:
            - arn:aws:lambda:${aws:region}:${aws:accountId}:function:gifGenerator-${sls:stage}-animatedGifGenerator
        - Effect: Allow
          Action:
            - ssm:GetParameters
          Resource:
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${sls:stage}/viideon
            - arn:aws:ssm:${aws:region}:${aws:accountId}:parameter/${sls:stage}/viideon/*
        - Effect: Allow
          Action:
            - cognito-idp:AdminConfirmSignUp
            - cognito-idp:AdminUpdateUserAttributes
          Resource:
            - Fn::GetAtt: [CognitoUserPool, Arn]
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
          Resource:
            - arn:aws:s3:::${self:custom.clientBucketName}
            - arn:aws:s3:::${self:custom.clientBucketName}/*
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DescribeTable
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.campaignTemplateTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.campaignTemplateTableName}/index/gidx-industryId
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.choicesTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.contactTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.emailConfigTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.emailConfigTableName}/index/gidx-userId
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.industriesTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.interactiveTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.interactiveTableName}/index/gidx-userId
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.metricsTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.peopleTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.publicMusicAssetsTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.replyTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.settingTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.settingTableName}/index/gidx-userIdName
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.stepTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tokenTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.tokenTableName}/index/gidx-token
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userTableName}/index/gidx-email
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userAssetsTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.userAssetsTableName}/index/gidx-userId
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.videosTableName}
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.videosTableName}/index/gidx-url
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.videosTableName}/index/gidx-thumbnail
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.videosTableName}/index/gidx-title
            - arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:custom.videosTableName}/index/gidx-userId
  environment:
    CAMPAIGN_TEMPLATE_TABLE_NAME: ${self:custom.campaignTemplateTableName}
    CHOICES_TABLE_NAME: ${self:custom.choicesTableName}
    CONTACT_TABLE_NAME: ${self:custom.contactTableName}
    EMAIL_CONFIG_TABLE_NAME: ${self:custom.emailConfigTableName}
    INDUSTRIES_TABLE_NAME: ${self:custom.industriesTableName}
    INTERACTIVE_TABLE_NAME: ${self:custom.interactiveTableName}
    METRICS_TABLE_NAME: ${self:custom.metricsTableName}
    PEOPLE_TABLE_NAME: ${self:custom.peopleTableName}
    PUBLIC_MUSIC_ASSETS_TABLE_NAME: ${self:custom.publicMusicAssetsTableName}
    REPLY_TABLE_NAME: ${self:custom.replyTableName}
    SETTING_TABLE_NAME: ${self:custom.settingTableName}
    STEP_TABLE_NAME: ${self:custom.stepTableName}
    TOKEN_TABLE_NAME: ${self:custom.tokenTableName}
    USER_TABLE_NAME: ${self:custom.userTableName}
    USER_ASSETS_TABLE_NAME: ${self:custom.userAssetsTableName}
    VIDEOS_TABLE_NAME: ${self:custom.videosTableName}
    CLIENT_S3_BUCKET: ${self:custom.clientBucketName}
    ENVIRONMENT: ${sls:stage}

plugins:
  - serverless-plugin-additional-stacks
  - serverless-plugin-include-dependencies
  - serverless-plugin-common-excludes

package:
  excludeDevDependencies: false

functions:
  api:
    handler: server.handler
    timeout: 30
    environment:
      COGNITO_USER_POOL_ID:
        !Ref CognitoUserPool
      COGNITO_CLIENT_ID:
        !Ref CognitoUserPoolClient
    events:
      - httpApi:
          path: /
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user
          method: get
      - httpApi:
          path: /user/register
          method: post
      - httpApi:
          path: /user/login
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/update/{id}
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/{id}
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/verify
          method: post
      - httpApi:
          path: /user/resendVerify
          method: post
      - httpApi:
          path: /user/forgotPassword
          method: post
      - httpApi:
          path: /user/resetPassword
          method: post
      - httpApi:
          path: /user/template
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/template/{userId}
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/template/{id}/{userId}
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/preview
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/emailvideo
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /user/signedUrl
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/getTemplate
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/email
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/thumbnail
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/updateViews
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/updateWatch
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/updateEmailShare
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/update/cta
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/user
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/single
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/campaignVideos
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/multiple/email
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/count
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/campaign/count
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /video/email/track
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /contact/create
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /email/config
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /email/config
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /email/config
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /email/send
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /email/send/{id}
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/add
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/addpublicmusic
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/getpublicmusic
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/delpublicmusic/{id}
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/add/music
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/get
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/getAllAssets
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/get/music
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/remove
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /asset/remove/music
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /campaign/templates
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /campaign/templates
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /campaign/templates
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /campaign/templates/{id}
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /industry
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /industry
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /industry
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /industry/{id}
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid
          method: get
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid
          method: delete
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid/reply
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid/step
          method: patch
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid/metrics
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid/metrics/{id}
          method: post
          authorizer:
            type: aws_iam
      - httpApi:
          path: /chatvid/delete/{id}
          method: delete
          authorizer:
            type: aws_iam

resources:
  Resources:
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UsernameAttributes: [email]
        UserPoolName: ${self:service}-${sls:stage}-userPool
        AccountRecoverySetting:
          RecoveryMechanisms:
            - Name: verified_email
              Priority: 1
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true
            TemporaryPasswordValidityDays: 7
        Schema:
          - AttributeDataType: 'String'
            Name: 'family_name'
            Required: true
            Mutable: true
          - AttributeDataType: 'String'
            Name: 'given_name'
            Required: true
            Mutable: true
          - AttributeDataType: 'String'
            Name: 'email'
            Required: true
            Mutable: false
          - AttributeDataType: 'String'
            Name: 'userType'
            Required: false
            Mutable: true
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${self:service}-${sls:stage}-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
    CognitoIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        # Generate a name based on the stage
        IdentityPoolName: ${self:service}-${sls:stage}-identity-pool
        # Don't allow unathenticated users
        AllowUnauthenticatedIdentities: true
        # Link to our User Pool
        CognitoIdentityProviders:
          - ClientId:
              Ref: CognitoUserPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPool", "ProviderName" ]
    # IAM roles
    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: CognitoIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnAuthorizedRole, Arn]
    # IAM role used for authenticated users
    CognitoUnAuthorizedRole:
      Type: "AWS::IAM::Role"
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: "Allow"
              Principal:
                Federated: "cognito-identity.amazonaws.com"
              Action:
                - "sts:AssumeRoleWithWebIdentity"
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/public/*
                - Effect: Allow
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/uploads/*
                - Effect: Allow
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/protected/*
                - Effect: 'Allow'
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}
                  Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                - Effect: 'Allow'
                  Action:
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                    - 'lambda:*'
                    - 'execute-api:Invoke'
                    - 'apigateway:*'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'sts:AssumeRole'
                    - 'ssm:GetParametersByPath'
                  Resource:
                    - 'arn:aws:iam::*:role/*'
                    - Fn::Join:
                        - ':'
                        -
                          - 'arn:aws:ssm'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'parameter/*'
    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: CognitoIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'CognitoAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - s3:GetObject
                    - s3:PutObject
                    - s3:DeleteObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/public/*
                    - !Join ['', ['arn:aws:s3:::', '${self:custom.clientBucketName}', '/protected/', '$', '{cognito-identity.amazonaws.com:sub}', '/*']]
                    - !Join ['', ['arn:aws:s3:::', '${self:custom.clientBucketName}', '/private/', '$', '{cognito-identity.amazonaws.com:sub}', '/*']]
                - Effect: 'Allow'
                  Action:
                    - s3:PutObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/uploads/*
                - Effect: 'Allow'
                  Action:
                    - s3:GetObject
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}/protected/*
                - Effect: 'Allow'
                  Action:
                    - s3:ListBucket
                  Resource:
                    - arn:aws:s3:::${self:custom.clientBucketName}
                  Condition:
                    StringLike:
                      s3:prefix:
                        - public/
                        - public/*
                        - protected/
                        - protected/*
                        - !Join ['', ['private/', '$', '{cognito-identity.amazonaws.com:sub}', '/']]
                        - !Join ['', ['private/', '$', '{cognito-identity.amazonaws.com:sub}', '/*']]
                - Effect: 'Allow'
                  Action:
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                    - 'lambda:*'
                    - 'execute-api:Invoke'
                    - 'apigateway:*'
                  Resource: '*'
                - Effect: 'Allow'
                  Action:
                    - 'sts:AssumeRole'
                    - 'ssm:GetParametersByPath'
                  Resource:
                    - 'arn:aws:iam::*:role/*'
                    - Fn::Join:
                        - ':'
                        -
                          - 'arn:aws:ssm'
                          - Ref: 'AWS::Region'
                          - Ref: 'AWS::AccountId'
                          - 'parameter/*'
